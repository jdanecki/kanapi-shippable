#!/bin/bash

show_setup() {
	wget --version
	curl --version
	gcc --version
	g++ --version
	echo "PKG_CONFIG: `pkg-config --version`"

	NR_CPUS=`cat /proc/cpuinfo | grep processor | wc -l`
	echo "NR_CPUS=${NR_CPUS}"
	free
	df -h
}

configure_ci() {
	cd ci-tests
	if [ ! -d ${HOME}/bin ] ; then mkdir ${HOME}/bin ; fi 
	if [ ! -d ${HOME}/src ]; then mkdir ${HOME}/src; fi
	
	ln -svf `pwd`/../cross_compilers/scripts/pkg_kanapi ${HOME}/bin/pkg_kanapi
	ls -l ${HOME}/bin 

	KANAPI_VER=`cat ../kanapi_system/scripts/KANAPI_VER`
	KANAPI_ROOT="${HOME}/kanapi_${KANAPI_VER}"
	mkdir -p ${KANAPI_ROOT}/x86_64/bin
	mkdir -p ${KANAPI_ROOT}/x86_64/packages/libs

	echo "checking CI"
	if [ "${SEMAPHORE}" = "true" ]
	then
		echo "SEMAPHORE"
		ln -sv Makefile.semaphore Makefile
	fi

	if [ "${CIRCLECI}" = "true" ]
	then
		echo "CIRCLE"
		ln -sv Makefile.circleci Makefile
	fi

	if [ "${TRAVIS}" = "true" ]
	then
		if [ "${SHIPPABLE}" = "true" ]
		then
			echo "SHIPPABLE"
			ln -sv Makefile.shippable Makefile
		else
			echo "TRAVIS"
			ln -sv Makefile.travis Makefile
		fi
	fi

	if [ "${CODESHIP}" = "TRUE" ]
	then
		echo "CODESHIP"
		ln -sv Makefile.codeship Makefile
	fi
	if [ -x ${HOME}/bin/pkg_kanapi ] 
	then 
		exit 0 
	else
		exit 2
	fi
}

configure_local() {
	echo "Using local mode for full compilation"
	cd ci-tests
	ln -sf Makefile.kanapi Makefile
	if [ ! -d ${HOME}/src ]; then mkdir ${HOME}/src; fi
	ln -svf `pwd`/../cross_compilers/scripts/pkg_kanapi /bin/pkg_kanapi
	echo "Now run make"
	exit 0
}

configure_chroot() {
	echo "Configuring chroot mode using SBS"
	sbs_name="sbs-`uname -m`"
	KANAPI_VER=`cat kanapi_system/scripts/KANAPI_VER`
	if [ ! -f "${sbs_name}/sbs.version" ] 
	then
		echo "SBS directory missing, downloading"
		#scp kanapi@localhost://kanapi_build/kanapi/kanapi_system/test_system/${sbs_name}.tar.xz .
		#scp g510://kanapi_build/kanapi/kanapi_system/test_system/${sbs_name}.tar.xz .
		curl -L http://downloads.sourceforge.net/project/kanapi/images/v${KANAPI_VER}/${sbs_name}.tar.xz -o ${sbs_name}.tar.xz
		echo "uncompressing SBS"
		tar -xJf ${sbs_name}.tar.xz
		echo "SBS version `cat ${sbs_name}/sbs.version` prepared"
	else
		echo "found SBS version `cat ${sbs_name}/sbs.version`"
	fi
	if [ ! -d ${sbs_name}/kanapi_build/kanapi ]
	then
		echo "creating git repo"
		git clone -v `pwd` ${sbs_name}/kanapi_build/kanapi
	else
		echo "updating git repo"
		pushd ${sbs_name}/kanapi_build/kanapi
		git pull
		popd
	fi
	ln -svf /kanapi_build/kanapi/cross_compilers/scripts/pkg_kanapi ${sbs_name}/bin/pkg_kanapi
	for f in hosts passwd resolv.conf group nsswitch.conf
	do
		cp /etc/$f ${sbs_name}/etc
	done
	if [ ! -d ${sbs_name}/kanapi_${KANAPI_VER}/`uname -m`/home/.local ]
	then
			mkdir ${sbs_name}/kanapi_${KANAPI_VER}/`uname -m`/home/.local
	fi
	cd ci-tests
	ln -sf Makefile.sbs Makefile
	echo "Now run make"
	exit 0
}

configure_jenkins() {
	echo "Configuring Jenkins mode using SBS"
	sbs_name="sbs-`uname -m`"
	KANAPI_VER=`cat kanapi_system/scripts/KANAPI_VER`
	if [ ! -f "${sbs_name}/sbs.version" ] 
	then
		echo "SBS directory missing, downloading"
		#scp kanapi@localhost://kanapi_build/kanapi/kanapi_system/test_system/${sbs_name}.tar.xz .
		#scp g510://kanapi_build/kanapi/kanapi_system/test_system/${sbs_name}.tar.xz .
		curl -L http://downloads.sourceforge.net/project/kanapi/images/v${KANAPI_VER}/${sbs_name}.tar.xz -o ${sbs_name}.tar.xz
		echo "uncompressing SBS"
		tar -xJf ${sbs_name}.tar.xz
		echo "SBS version `cat ${sbs_name}/sbs.version` prepared"
	else
		echo "found SBS version `cat ${sbs_name}/sbs.version`"
	fi
	if [ ! -d ${sbs_name}/kanapi_build/kanapi ]
	then
		echo "creating git repo"
		git clone -v `pwd` ${sbs_name}/kanapi_build/kanapi
	else
		echo "updating git repo"
		pushd ${sbs_name}/kanapi_build/kanapi
		git pull
		popd
	fi
	ln -svf /kanapi_build/kanapi/cross_compilers/scripts/pkg_kanapi ${sbs_name}/bin/pkg_kanapi
	for f in hosts passwd resolv.conf group nsswitch.conf
	do
		cp /etc/$f ${sbs_name}/etc
	done
	if [ ! -d ${sbs_name}/kanapi_${KANAPI_VER}/`uname -m`/home/.local ]
	then
			mkdir ${sbs_name}/kanapi_${KANAPI_VER}/`uname -m`/home/.local
	fi
	cd ci-tests
	ln -sf Makefile.jenkins Makefile
	echo "Now run make"
	exit 0
}

update_sbs() {
	ARCH="`uname -m`"
	cp /kanapi_build/kanapi/kanapi_system/test_system/sbs-${ARCH}.tar.xz .
	if [ -d sbs-${ARCH} ]
	then
		rm -rf sbs-${ARCH}
	fi
	tar -xJf sbs-${ARCH}.tar.xz
	exit 0
}

if [ "$1" = "--help" -o "$1" = "help" ]
then
	echo "configure parameters: [local | ci | chroot | setup]"
	echo "chroot - configure for compilation in chroot using SBS (default)"
	echo "local - configure for full compilation, prepared for builds in KaNaPi"
	echo "ci - configure compilation under CI (Travis/Codeship)"
	echo "setup - show information about setup"
	echo "jenkins - configure for compilation under Jenkins"
	echo "update-sbs - update SBS locally"
	exit 0
fi

if [ "${CI}" = "true" -o "$1" = "ci" ]
then
	show_setup
	configure_ci
fi

if [ "$1" = "setup" ]
then
	show_setup
	exit 0
fi

if [ "$1" = "local" ]
then
	configure_local
fi

if [ "$1" = "chroot" ]
then
	configure_chroot
fi

if [ "$1" = "jenkins" ]
then
	configure_jenkins
fi

if [ "$1" = "update-sbs" ]
then
	update_sbs
fi

if [ "`lsb_release -is`" = "KaNaPi" ]
then 
	configure_local
fi

configure_chroot

