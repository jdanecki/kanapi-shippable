#!/bin/bash
#
# Copyright (c) 2012-2016 Jacek Danecki <jacek.m.danecki@gmail.com>
#
# This file is part of KaNaPi project
#
# KaNaPi is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# KaNaPi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with KaNaPi.  If not, see <http://www.gnu.org/licenses/>.

PACKAGE_NAME=glibc
VER=2.23
URL="http://ftp.gnu.org/gnu/glibc"
EXT=tar.xz
#build depends on
export DONT_INSTALL_INCLUDE=1
. ../settings
	
export LDFLAGS="-fno-stack-protector -O2"

pkg_prepare() {
	pkg_tar_xz
}

set_variables() {
	export LIBRARIES_PATH=${KANAPI_CROSS_BASE}/gmp-${gmp_ver}/lib:${KANAPI_CROSS_BASE}/mpfr-${mpfr_ver}/lib:${KANAPI_CROSS_BASE}/mpc-${mpc_ver}/lib
	if [ -n "${LD_LIBRARY_PATH}" ] 
	then
		export LD_LIBRARY_PATH=${LIBRARIES_PATH}:${LD_LIBRARY_PATH}
	else
		export LD_LIBRARY_PATH=${LIBRARIES_PATH}
	fi
	export PATH_TMP=${KANAPI_CROSS_BASE}/binutils-${binutils_ver}/bin:${KANAPI_CROSS_BASE}/gcc-${gcc_ver}/bin
	if [ "${KANAPI_TARGET}" = "arm" ]
	then
		export PATH=${PATH_TMP}:${PATH}
	else
		export PATH=${PATH_TMP}:${KANAPI_CROSS_BASE}/binutils-${binutils_ver}/${KANAPI_TARGET_NAME}/bin:${PATH}
	fi
	export CC="${KANAPI_C_COMPILER} -I ${KANAPI_BASE}/gcc-${gcc_ver}/lib/gcc/${KANAPI_TARGET_NAME}/${gcc_ver}/include"
}

pkg_configure() {
	set_variables
	${PACKAGE_SRCDIR}/configure --prefix=$PREFIX --host=${KANAPI_TARGET_NAME} \
	libc_cv_ssp=no  libc_cv_ssp_strong=no --without-selinux --disable-stackguard-randomization \
	--without-selinux \
	--with-headers=${KANAPI_BASE}/linux-headers-${linux_headers_ver}/include \
	--with-binutils=${KANAPI_CROSS_BASE}/binutils-${binutils_ver} --enable-obsolete-rpc
	
	#--enable-multi-arch
}

header() {
	${MAKE} install-headers-nosubdir 

	if [ ! -d ${KANAPI_BASE}/gcc-${gcc_ver}/${KANAPI_TARGET_NAME} ]
	then 
		mkdir ${KANAPI_BASE}/gcc-${gcc_ver}/${KANAPI_TARGET_NAME}
		mkdir ${PREFIX}/lib
		${LN_SF} ${PREFIX}/include ${KANAPI_BASE}/gcc-${gcc_ver}/${KANAPI_TARGET_NAME}
		${LN_SF} include ${KANAPI_BASE}/gcc-${gcc_ver}/${KANAPI_TARGET_NAME}/sys-include
		${LN_SF} ${PREFIX}/lib ${KANAPI_BASE}/gcc-${gcc_ver}/${KANAPI_TARGET_NAME}/lib
		touch ${KANAPI_BASE}/gcc-${gcc_ver}/${KANAPI_TARGET_NAME}/include/gnu/stubs.h
		cp -ar ${KANAPI_BASE}/linux-headers-${linux_headers_ver}/include/* ${KANAPI_BASE}/gcc-${gcc_ver}/${KANAPI_TARGET_NAME}/include
	fi
	${MAKE} csu/subdir_lib
	install csu/crt1.o csu/crti.o csu/crtn.o ${PREFIX}/lib
	${KANAPI_TARGET_NAME}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${PREFIX}/lib/libc.so
	${MAKE} install-headers
}

pkg_build() {
	set_variables
	${MAKE} -j ${MAKE_JOBS} MAKEINFO=true
}

install_on_old_kanapi() {
	OLD_PATH=${PATH}
	NEW_PATH=`echo $PATH | sed "s@${KANAPI_TARGET_BIN}:@@g"`
	export PATH=${NEW_PATH}
	CUR_SH=`readlink /bin/sh`
	${LN_SF} /kanapi_packages/bin/sh /bin/sh
	MAKE_JOBS=1
	pkg_install_make
	${LN_SF} ${CUR_SH} /bin/sh 
	export PATH=${OLD_PATH}
}

upgrade_glibc() {
	echo "upgrade_glibc"
	PATCHELF=`which patchelf`
	if [ ! -x "${PATCHELF}" ]
	then
		echo "ERROR: patchelf not available"
		exit 2
	fi
	LINKER=`patchelf --print-interpreter /bin/sh`
	cp ${LINKER} ${LINKER}-backup.so
	cp /bin/sh /bin/sh-backup
	patchelf --set-interpreter ${LINKER}-backup.so /bin/ln
	patchelf --set-interpreter ${LINKER}-backup.so /bin/sh-backup
	patchelf --set-interpreter ${LINKER}-backup.so /bin/sed
	CUR_SH=`readlink /bin/sh`
	${LN_SF} /bin/sh-backup /bin/sh
	cp ${PREFIX}/lib/libc.so.6 /tmp
	cp ${PREFIX}/lib/libdl.so.2 /tmp
	export LD_LIBRARY_PATH=/tmp
	MAKE_JOBS=1
	pkg_install_make
	patchelf --set-interpreter ${LINKER} /bin/ln
	${LN_SF} ${CUR_SH} /bin/sh 
	patchelf --set-interpreter ${LINKER} /bin/sed
}

install_glibc() {
	if [ -x /kanapi_packages/bin/sh ] 
	then
		install_on_old_kanapi
	else
		if [ "${KANAPI_TARGET}" = "x86_64" ]
		then
			LINKER_NAME=ld-linux-x86-64.so.2
		fi
		if [ -f ${PREFIX}/lib/${LINKER_NAME} ]
		then
			upgrade_glibc
		else
			MAKE_JOBS=1
			echo pkg_install_make
		fi
	fi
}

pkg_install() {
	set_variables
	date > manual/libc.info
	install_glibc
	CROSS_GCC_DIR=${KANAPI_CROSS_BASE}/gcc-${gcc_ver}/${KANAPI_TARGET_NAME} 
	if [ ! -d ${CROSS_GCC_DIR} ]
	then 
		mkdir -p ${CROSS_GCC_DIR}
		${LN_SF} ${PREFIX}/include ${CROSS_GCC_DIR}
		${LN_SF} include ${CROSS_GCC_DIR}/sys-include
		${LN_SF} ${PREFIX}/lib ${CROSS_GCC_DIR}/lib
		cp -ar ${KANAPI_BASE}/linux-headers-${linux_headers_ver}/include/* ${CROSS_GCC_DIR}/include
	fi
	if [ "${KANAPI_TARGET}" = "x86_64" ]
	then
		LINKER_NAME=ld-linux-x86-64.so.2
		LINKER_PATH=lib64
		${LN_SF} ${PREFIX}/lib ${PREFIX}/lib64
    	fi
	if [ "${KANAPI_TARGET}" = "i686" ]
	then
		LINKER_NAME=ld-linux.so.2
		LINKER_PATH=lib
	fi
	if [ "${KANAPI_TARGET}" = "arm" ]
	then
		LINKER_NAME=ld-linux.so.3
		LINKER_PATH=lib
	fi
	
	${KANAPI_CROSS_BASE}/gcc-${gcc_ver}/bin/${KANAPI_TARGET_NAME}-gcc  -dumpspecs | sed "s@/${LINKER_PATH}/${LINKER_NAME}@${PREFIX}/lib/${LINKER_NAME}@g" \
		> ${KANAPI_CROSS_BASE}/gcc-${gcc_ver}/lib/gcc/${KANAPI_TARGET_NAME}/${gcc_ver}/specs

#execute this on target only
	if [ ${KANAPI_TARGET} = `uname -m` ]
	then
		mkdir -p ${PREFIX}/lib/locale
		${PREFIX}/bin/localedef -c -i pl_PL -f UTF-8 pl_PL.UTF-8
	fi
}	

pkg_check() {
	ld --version
	echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"
	gcc --version
	echo "KANAPI_VER=${KANAPI_VER}"
	NEW_PATH=`echo $PATH | sed "s@${KANAPI_TARGET_BIN}:@@g"`
	echo "PATH=$PATH"
	echo "NEW_PATH=${NEW_PATH}"
}
