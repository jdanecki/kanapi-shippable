#set -x

export LANGUAGE="C"
export LC_ALL="C"
export LC_MESSAGES="C"
export LC_COLLATE="C"
export LC_CTYPE="C"
export LANG="C"

KANAPI_TARGET_NAME=${KANAPI_TARGET}-kanapi-linux-gnu
KANAPI_BUILD_NAME=`uname -m`-kanapi-linux-gnu
KANAPI_VER=`cat ../../scripts/KANAPI_VER`
if [ "`id -u`" != "0" ]
then
	KANAPI_ROOT="${HOME}/kanapi_${KANAPI_VER}"
else
	KANAPI_ROOT="/kanapi_${KANAPI_VER}"
fi
KANAPI_BASE=${KANAPI_ROOT}/${KANAPI_TARGET}/packages
KANAPI_HOST_BASE=${KANAPI_ROOT}/`uname -m`/packages
KANAPI_HOME=${KANAPI_ROOT}/`uname -m`/home
KANAPI_TARGET_BIN=${KANAPI_ROOT}/${KANAPI_TARGET}/bin
KANAPI_BUILD_SRC=${HOME}/src

##############################################################
. ../../scripts/cross.kanapi

PACKAGE_VER=${PACKAGE_NAME}-${VER}
PREFIX=${KANAPI_BASE}/${PACKAGE_VER}
PACKAGE_SRCDIR=${KANAPI_BUILD_SRC}/${PACKAGE_VER}
PACKAGE_FILENAME=${PACKAGE_VER}.${EXT}

if [[ ${URL} == "SF" ]]
then
	PACKAGE_LINK=http://downloads.sourceforge.net/project/${SF_URL}
else
	if [[ ${URL} == "GNU" ]]
	then
		#PACKAGE_LINK=http://ftp.gnu.org/pub/gnu/${PACKAGE_NAME}/${PACKAGE_FILENAME}
		PACKAGE_LINK=http://sunsite.icm.edu.pl/pub/gnu/${PACKAGE_NAME}/${PACKAGE_FILENAME}
	else
		PACKAGE_LINK=${URL}/${PACKAGE_FILENAME}
	fi
fi

export LIBC_PREFIX="${KANAPI_BASE}/glibc-${glibc_ver}"

if [ -x ${KANAPI_TARGET_BIN}/ccache -a  "${CI}" != "true" ]
then
	USE_CCACHE=1
fi

export PKG_CONFIG=${KANAPI_PKGCONFIG}

if [ -n "${PKG_CONFIG}" ]
then
	export PKG_CONFIG_DIR=${KANAPI_BASE}/pkg-config-${pkg_config_ver}/share/pkgconfig
	if [[ -n "${LIB_DEPENDS}" ]]
	then
		${PKG_CONFIG} --exists ${LIB_DEPENDS}
		if [ "$?" = "0" ]
		then
			export LDFLAGS="`${PKG_CONFIG} --libs ${LIB_DEPENDS}` -ldl"
			export LD_LIBRARY_PATH=`${PKG_CONFIG} --variable=libdir ${LIB_DEPENDS} | sed "s/ /:/g"`:${LD_LIBRARY_PATH}
			export CFLAGS=`${PKG_CONFIG} --cflags ${LIB_DEPENDS}`
		fi
	fi
else
	if [ -d ${KANAPI_BASE}/glib-${glib_ver} ]
	then
		export GLIB_CFLAGS="-I${KANAPI_BASE}/glib-${glib_ver}/include -I${KANAPI_BASE}/glib-${glib_ver}/include/glib-2.0 -I${KANAPI_BASE}/glib-${glib_ver}/lib/glib-2.0/include"
		export GLIB_LIBS="-L${KANAPI_BASE}/glib-${glib_ver}/lib -lglib-2.0 -lgmodule-2.0"
	fi
fi

if [ -d ${KANAPI_BASE}/libs ]
then
	if [ -n "${LD_LIBRARY_PATH}" ]
	then
		export LD_LIBRARY_PATH="${KANAPI_BASE}/libs:${LD_LIBRARY_PATH}"
	else
		export LD_LIBRARY_PATH="${KANAPI_BASE}/libs"
	fi
fi

if [ -f ${KANAPI_BASE}/ncurses-${ncurses_ver}/bin/ncurses6-config ]
then
	NCURSES_CONFIG=${KANAPI_BASE}/ncurses-${ncurses_ver}/bin/ncurses6-config
	NCURSES_CFLAGS=`${NCURSES_CONFIG} --cflags`
	NCURSES_LDFLAGS=`${NCURSES_CONFIG} --libs`
fi

if [ -f ${KANAPI_BASE}/libgpg-error-${libgpg_error_ver}/bin/gpg-error-config ]
then
	GPG_ERROR_CONFIG=${KANAPI_BASE}/libgpg-error-${libgpg_error_ver}/bin/gpg-error-config
	GPG_ERROR_CFLAGS=`${GPG_ERROR_CONFIG} --cflags`
	GPG_ERROR_LDFLAGS=`${GPG_ERROR_CONFIG} --libs`
fi

if [ -f ${KANAPI_BASE}/libgcrypt-${libgcrypt_ver}/bin/libgcrypt-config ]
then
	LIBGCRYPT_CONFIG=${KANAPI_BASE}/libgcrypt-${libgcrypt_ver}/bin/libgcrypt-config
	LIBGCRYPT_CFLAGS=`${LIBGCRYPT_CONFIG} --cflags`
	LIBGCRYPT_LDFLAGS=`${LIBGCRYPT_CONFIG} --libs`
fi

if [ "${KANAPI_TARGET}" = "x86_64" ]
then
	CFLAGS="${CFLAGS} -fPIC"
fi
	
NR_CPUS=`cat /proc/cpuinfo | grep processor | wc -l`
MAKE_JOBS=${NR_CPUS}

if [ "${SHIPPABLE}" = "true" ]
then 
	MAKE_JOBS=8
fi

if [ "${SEMAPHORE}" = "true" ]
then 
	MAKE_JOBS=16
fi

if [ "x${PKG_VERBOSE}" = "x1" ]
then
	MAKE=make
	LN_SF="ln -svf"
else
	MAKE="make -s"
	LN_SF="ln -sf"
fi

local_copy() {
	rm -rf build
	mkdir build
	cp -ar ${PACKAGE_SRCDIR}/* build
	find ${PACKAGE_SRCDIR} -maxdepth 1 -name .\* -exec cp -a {} build \; 
	cd build
}

pkg_wget() {
	if [ -s ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} ] 
	then 
		echo "$PACKAGE_NAME: already downloaded"
	else
		echo "downloading ${PACKAGE_NAME}"
		wget ${PACKAGE_LINK} -O ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME}
	fi
}

check_file_type() {
	FILE=($(file -iL  ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME}))
	if [ "${#FILE[@]}" = "3" ]
	then
		MIME=${FILE[1]:0:-1}
		DOWNLOADED=0
		echo -n "Checking ${FILE[0]} "
		case $EXT in
		bz2) echo -n "bz2 "
				if [ "${MIME}" = "application/x-bzip2" ] ; then DOWNLOADED=1 ; fi
				;;
		tar.bz2) echo -n "tar.bz2 "
				if [ "${MIME}" = "application/x-bzip2" ] ; then DOWNLOADED=1 ; fi
				;;
		src.tar.gz) echo -n "src.tar.gz "
				if [ "${MIME}" = "application/x-gzip" -o "${MIME}" = "application/gzip" ] ; then DOWNLOADED=1 ; fi
				;;
		tar.gz) echo -n "tar.gz "
				if [ "${MIME}" = "application/x-gzip" -o "${MIME}" = "application/gzip" ] ; then DOWNLOADED=1 ; fi
				;;
		tar.xz) echo -n "tar.xz "
				if [ "${MIME}" = "application/x-xz" ] ; then DOWNLOADED=1 ; fi
				;;
		tgz) echo -n "tgz "
				if [ "${MIME}" = "application/x-gzip" -o "${MIME}" = "application/gzip" ] ; then DOWNLOADED=1 ; fi
				;;
		zip) echo -n "zip "
				if [ "${MIME}" = "application/zip" ] ; then DOWNLOADED=1 ; fi
				;;
		*) echo "unknown extension $EXT: ${FILE[1]}"
			false
			;;
		esac
		if [ "$DOWNLOADED" = "1" ]
		then 
			echo " ok"
			true
		else
			echo " Error, got ${MIME}"
			echo "removing ${FILE[0]:0:-1}"
			rm -f ${FILE[0]:0:-1}
			false
		fi
	else
		echo "Error in getting file type: ${FILE}"
		false
	fi
}

pkg_curl() {
	if [ -s ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} ] 
	then 
		echo "$PACKAGE_NAME: already downloaded"
	else
		echo "downloading ${PACKAGE_NAME} from ${PACKAGE_LINK}"
		curl -L ${PACKAGE_LINK} -o ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME}
		if [ ! -e ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} ] 
		then 
			echo "downloading ${PACKAGE_NAME} again"
			curl -L ${PACKAGE_LINK} -o ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME}
		fi
		if [ ! -e ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} ] 
		then
			false
		else
			check_file_type
		fi
	fi
}

pkg_download() {
	if [ "${TRAVIS}" = "true" ]
	then
		if [ "${SHIPPABLE}" != "true" ]
		then
			echo "Running under Travis, removing sources"
			rm -rf ${KANAPI_BUILD_SRC}
			mkdir ${KANAPI_BUILD_SRC}
		fi
	fi
	pkg_curl
}

pkg_redownload() {
	if [ "${TRAVIS}" = "true" ]
	then
		echo "Running under Travis, removing sources"
		rm -rf ${KANAPI_BUILD_SRC}
		mkdir ${KANAPI_BUILD_SRC}
	fi
	if [ -s ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} ] 
	then
		rm  ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME}
	fi	
	pkg_download
}


pkg_git_clone() {
	if [ -d ${KANAPI_BUILD_SRC}/${PACKAGE_NAME}-${VER} ] 
	then 
		echo "$PACKAGE_NAME: already downloaded"
	else
		echo "cloning from ${URL}/${PACKAGE_NAME}"
		if [ -n "${EXT}" ]
		then
			git clone ${URL}/${PACKAGE_NAME}.${EXT} ${PACKAGE_SRCDIR}
		else
			git clone ${URL}/${PACKAGE_NAME} ${PACKAGE_SRCDIR}
		fi
	fi
}

pkg_git_checkout() {
	cd ${PACKAGE_SRCDIR}
	git checkout -f ${VER}
}

pkg_git_submodule_init() {
	cd ${PACKAGE_SRCDIR}
	git submodule update --init
}

pkg_copy() {
	mkdir ${KANAPI_BUILD_SRC}/${PACKAGE_VER}
	cp -v ${KANAPI_BUILD_SRC}/${PACKAGE_NAME} ${KANAPI_BUILD_SRC}/${PACKAGE_VER}/${PACKAGE_NAME}
}

pkg_tar_gz() {
	 tar -xzf ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -C ${KANAPI_BUILD_SRC}
} 

pkg_tgz() {
	 tar -xzf ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -C ${KANAPI_BUILD_SRC}
} 

pkg_tar_xz() {
	 tar -xJf ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -C ${KANAPI_BUILD_SRC}
} 

pkg_tar_bz2() {
	 tar -xjf ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -C ${KANAPI_BUILD_SRC}
} 

pkg_zip() {
	 unzip ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -o -d ${KANAPI_BUILD_SRC}
} 

pkg_bz2() {
	mkdir ${KANAPI_BUILD_SRC}/${PACKAGE_VER}
	bzip2 -d ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -c > ${KANAPI_BUILD_SRC}/${PACKAGE_VER}/${PACKAGE_NAME}
}

pkg_version() {
	echo ${PACKAGE_VER}
}

pkg_configure_native() {
	${PACKAGE_SRCDIR}/configure --prefix=$PREFIX
}

pkg_configure_target() {	
	${PACKAGE_SRCDIR}/configure --prefix=$PREFIX --host=${KANAPI_TARGET_NAME}
}

pkg_configure() {
	pkg_configure_target
}

pkg_build() {
	${MAKE} -j ${MAKE_JOBS} MAKEINFO=true
}

pkg_install_make() {
	${MAKE} -j ${MAKE_JOBS} install MAKEINFO=true
}

pkg_install() {
	pkg_install_make
}	

pkg_install_pc() {	
	pkg_install_make
	if [ -f ${PREFIX}/lib/pkgconfig/${PACKAGE_NAME}.pc ]
	then	
		${LN_SF} ${PREFIX}/lib/pkgconfig/${PACKAGE_NAME}.pc ${PKG_CONFIG_DIR}/${PACKAGE_NAME}.pc
	fi
}

pkg_install_pc_share() {	
	pkg_install_make
	if [ -f ${PREFIX}/share/pkgconfig/${PACKAGE_NAME}.pc ]
	then
		${LN_SF} ${PREFIX}/share/pkgconfig/${PACKAGE_NAME}.pc ${PKG_CONFIG_DIR}/${PACKAGE_NAME}.pc
	fi
}

pkg_install_pc_share_all() {
	pkg_install_make
	pkg_install_pc_share_all_only
}

pkg_install_pc_share_all_only() {
	for i in ${PREFIX}/share/pkgconfig/*
	do
		if [ -f $i ]
		then
			${LN_SF} $i ${PKG_CONFIG_DIR}/`basename $i`
		fi
	done
}
	
pkg_install_pc_all() {
	pkg_install_make
	pkg_install_pc_all_only
}

pkg_install_pc_all_only() {
	for i in ${PREFIX}/lib/pkgconfig/* ${PREFIX}/lib64/pkgconfig/*
	do
		if [ -f $i ]
		then
			${LN_SF} $i ${PKG_CONFIG_DIR}/`basename $i`
		fi
	done
}


pkg_uninstall() {
	if [ -d ${PREFIX} ]
	then	
		rm -rf ${KANAPI_ROOT}/${KANAPI_TARGET}/packages/${PACKAGE_VER}
	fi
}

pkg_rebuild() {
	pkg_prepare
	pkg_configure
	pkg_build
}

pkg_clean() {
	echo "*** cleaning ${PACKAGE_VER} ***"
	cd .. ; if [ -d ${PACKAGE_VER} ] ; then rm -rf ${PACKAGE_VER} ; fi
}

pkg_package() {
	pkg_download
	pkg_prepare
	pkg_configure
	pkg_build
}

pkg_install_bin() {
	if [ -f ${PREFIX}/bin/${PACKAGE_NAME} ]
	then
		${LN_SF} ${PREFIX}/bin/${PACKAGE_NAME} ${KANAPI_BASE}/../bin/${PACKAGE_NAME}
	fi
}

pkg_install_bin_all() {
	if [ ! -d ${KANAPI_TARGET_BIN} ] ; then mkdir ${KANAPI_TARGET_BIN} ; fi
	if [ -d ${PREFIX}/bin ]	
	then
		${LN_SF} ${PREFIX}/bin/* ${KANAPI_TARGET_BIN}
	fi
}

pkg_install_sbin_all() {
	if [ -d ${PREFIX}/sbin ]	
	then
		${LN_SF} ${PREFIX}/sbin/* ${KANAPI_TARGET_BIN}
	fi
}

pkg_install_usr_bin_all() {
	if [ -d ${PREFIX}/usr/bin ]	
	then
		${LN_SF} ${PREFIX}/usr/bin/* ${KANAPI_TARGET_BIN}
	fi
}

pkg_install_libs() {
	if [ ! -d ${KANAPI_BASE}/libs ] ; then mkdir ${KANAPI_BASE}/libs; fi
	for f in ${PREFIX}/lib/lib*.so* ${PREFIX}/lib/lib*.a  ${PREFIX}/lib/lib64*.so* ${PREFIX}/lib64/lib*.a 
	do
		if [ -f $f ] 
		then
			${LN_SF} $f ${KANAPI_BASE}/libs/`basename $f`
		fi
	done
	if [ "`id -u`" = "0" ]
	then
		export LD_LIBRARY_PATH=
		ldconfig
	fi
}

pkg_install_all() {
	pkg_install_pc
	pkg_install_libs
	pkg_install_bin
}

pkg_test() {
	echo "tests for ${PACKAGE_NAME}"
	${MAKE} -C ../../tests test_${PACKAGE_NAME} KANAPI_TARGET_NAME=${KANAPI_TARGET_NAME} KANAPI_BASE=${KANAPI_BASE}
}

pkg_check() {
	echo "!!! Add your tests in ${PACKAGE_NAME}.kanapi file !!!"
}

pkg_install_schemas() {
	for i in ${PREFIX}/share/glib-2.0/schemas/*.xml
	do
		${LN_SF} $i `${PKG_CONFIG} --variable=prefix gsettings-desktop-schemas`/share/glib-2.0/schemas
	done
	glib-compile-schemas `${PKG_CONFIG} --variable=prefix gsettings-desktop-schemas`/share/glib-2.0/schemas
}

check_script() {
	echo "checking shell"
	LINE=`head -n 1 $1`
	echo $LINE | grep "#!"
	if [ "$?" = "0" ]
	then
		SHL="`echo ${LINE[@]:2} | sed 's/ .*$//' `"
		if [ -x $SHL ]
		then 
			true
		else
			false
		fi 
	else
		false
	fi
}

verify_file() {
	FILE=($(file -iL $1))
	if [ "${#FILE[@]}" = "3" ]
	then
		MIME=${FILE[1]:0:-1}
		VERIFIED=0
		echo -n "Checking ${FILE[0]} "
		case $MIME in
		application/x-executable) echo "application "
				file -L $1 | grep "statically linked"
				if [ "$?" = "0" ] 
				 then 
					VERIFIED=1 
				else
					ldd $1
					if [ "$?" = "0" ] ; then VERIFIED=1 ; fi
				fi
				;;
		application/x-sharedlib) echo "library "
				ldd $1
				if [ "$?" = "0" ] ; then VERIFIED=1 ; fi
				;;
		text/x-shellscript) echo "shell script"
				check_script $1
				if [ "$?" = "0" ] ; then VERIFIED=1 ; fi
				;;
		text/x-perl) echo "perl script"
				check_script $1
				if [ "$?" = "0" ] ; then VERIFIED=1 ; fi
				;;
		text/x-pascal) echo "pascal/perl script"
				check_script $1
				if [ "$?" = "0" ] ; then VERIFIED=1 ; fi
				;;
		text/x-awk) echo "awk script"
				check_script $1
				if [ "$?" = "0" ] ; then VERIFIED=1 ; fi
				;;
		text/plain) echo "text file"
				check_script $1
				if [ "$?" = "0" ] ; then VERIFIED=1 ; fi
				;;
		text/x-python) echo "python script"
				check_script $1
				if [ "$?" = "0" ] ; then VERIFIED=1 ; fi
				;;
		image/x-ms-bmp) echo "bmp file"
				VERIFIED=1
				;;
		text/html) echo "html file"
				VERIFIED=1
				;;
		*) echo "unknown file type: ${FILE[1]}"
			false
			;;
		esac
		if [ "$VERIFIED" = "1" ]
		then
			echo " ok"
			true
		else
			echo " Error, got ${MIME}"
			false
		fi
	else
		echo "Error in getting file type: ${FILE}"
		false
	fi
}

pkg_verify() {
	echo "Verifing ${PACKAGE_NAME} in ${PREFIX}"
	for f in ${PREFIX}/bin/* ${PREFIX}/sbin/*  ${PREFIX}/usr/bin/* ${PREFIX}/usr/sbin/*
	do
		if [ -f $f ]
		then
			verify_file $f
			if [ "$?" != "0" ]
			then
				exit 1
			fi
		fi
	done
	for f in ${PREFIX}/lib/lib*.so* ${PREFIX}/lib/lib64*.so*
	do
		if [ -f $f ]
		then
			verify_file $f
		fi
	done
}
